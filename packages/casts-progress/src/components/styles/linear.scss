@use 'sass:map';
@use '@casts/theme/styles/scss/vars/core';
@use '@casts/theme/styles/scss/progress' as base-progress;
@use '@casts/theme/styles/scss/vars/progress';

@keyframes linearKeyframe {
  0% {
    left: calc(0% - progress.$progress-linear-indeterminate-bar-width);
  }

  100% {
    left: 100%;
  }
}

$linear-prefix-cls: #{progress.$prefix-cls}-linear-progress;

@mixin flex-and-align-center($display: flex) {
  display: $display;
  align-items: center;
}

$sizes: 'small', 'medium', 'large';

.#{$linear-prefix-cls} {
  position: relative;
  width: 100%;
  color: progress.$progress-color-brand-default;
  @include flex-and-align-center;

  @mixin linear-progress-height {
    @each $size in $sizes {
      &--#{$size} {
        height: map.get(
          progress.$progress-tokens,
          progress-linear-size-#{$size}
        );
      }
    }
  }

  @include linear-progress-height();

  &--indeterminate {
    .#{$linear-prefix-cls}-bar {
      .#{$linear-prefix-cls}-inner {
        position: absolute;
        width: progress.$progress-linear-indeterminate-bar-width !important;
        animation: linearKeyframe core.$motion-duration-sustained
          core.$motion-easing-in-out infinite;
      }
    }
  }

  &-bar {
    position: relative;
    display: block;
    flex: 1;
    height: 100%;
    overflow: hidden;
    background-color: progress.$progress-track-color;
    border-radius: core.$radius-large;

    .#{$linear-prefix-cls}-inner {
      display: block;
      height: 100%;
      background-color: currentColor;
      border-radius: core.$radius-large;
      transition: width 150ms core.$motion-easing-in-out;
    }
  }

  &-label {
    @include flex-and-align-center(inline-flex);
    min-width: core.$size-large;
    margin-left: core.$space-05-x;
    font-size: core.$font-size-small;
    line-height: core.$line-height-small;

    .#{$linear-prefix-cls}-icon,
    .#{$linear-prefix-cls}-text {
      @include flex-and-align-center(inline-flex);
    }

    .#{$linear-prefix-cls}-text {
      color: core.$color-text-primary;
    }
  }
}

@function get-theme-color($theme) {
  @if $theme == 'error' {
    @return map.get(progress.$progress-tokens, progress-color-danger-default);
  }

  @return map.get(progress.$progress-tokens, progress-color-#{$theme}-default);
}

@mixin linear-progress-status {
  $statuses: 'success', 'warning', 'error';

  @each $status in $statuses {
    .#{$linear-prefix-cls}--#{$status} {
      color: get-theme-color($status);
    }
  }
}

@include linear-progress-status();
