@use 'sass:map';
@use '@casts/theme/styles/scss/vars/core';
@use '@casts/theme/styles/scss/input' as base-input;
@use '@casts/theme/styles/scss/vars/input';

@use '@casts/theme/styles/plugins/helper/theme';

$input-prefix-cls: #{input.$prefix-cls}-input;

@mixin input-size($size: 'medium') {
  $font-size: if(
    $size == 'small',
    input.$input-font-size-small,
    input.$input-font-size-medium
  );
  $line-height: if(
    $size == 'small',
    input.$input-line-height-small,
    input.$input-line-height-medium
  );

  height: map.get(input.$input-tokens, input-size-#{$size});
  font-size: $font-size;
  line-height: $line-height;
}

$sizes: 'small', 'medium', 'large';

$statuses: 'success', 'warning', 'error';

@mixin input-color($status, $disabled: false) {
  $theme: theme.get-theme-by-status($status);
  $disabled-selector: '.#{$input-prefix-cls}-wrap--disabled .#{$input-prefix-cls}';

  & {
    $color-suffix: if($disabled ==true, 'disabled', 'default');
    color: map.get(core.$core-tokens, color-shape-#{$theme}-#{$color-suffix});
    background-color: map.get(
      core.$core-tokens,
      color-surface-#{$theme}-#{$color-suffix}
    );

    &:hover:not(#{$disabled-selector}) {
      background-color: map.get(
        core.$core-tokens,
        color-surface-#{$theme}-hover
      );
    }

    &--focused:not(#{$disabled-selector}),
    &:focus:not(#{$disabled-selector}) {
      background-color: transparent !important;
      border-color: map.get(core.$core-tokens, color-border-#{$theme}-default);
      outline: input.$input-outline-width solid
        map.get(input.$input-tokens, input-color-outline-#{$theme}-default);
    }
  }
}

.#{$input-prefix-cls} {
  position: relative;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  padding-right: core.$space-05-x;
  padding-left: core.$space-05-x;
  overflow: hidden;
  cursor: text;
  background-color: core.$color-surface-component-default;
  border-color: transparent;
  border-style: solid;
  border-width: input.$input-border-width;
  border-radius: input.$input-radius;
  transition:
    background-color core.$motion-duration-rapid #{core.$motion-easing-in-out},
    border-color core.$motion-duration-rapid #{core.$motion-easing-in-out},
    outline-color-color core.$motion-duration-rapid
      #{core.$motion-easing-in-out};

  &:hover:not(&-wrap--disabled &) {
    background-color: core.$color-surface-component-hover;
  }

  &--focused:not(&-wrap--disabled &),
  &:focus:not(&-wrap--disabled &) {
    background-color: transparent !important;
    border-color: core.$color-border-brand-default;
    outline: input.$input-outline-width solid
      input.$input-color-outline-brand-default;
  }

  &--bordered {
    border-color: core.$color-border-neutral-default;

    &:hover {
      border-color: core.$color-border-neutral-hover;
    }
  }

  // size
  @each $size in $sizes {
    &--#{$size} {
      @include input-size($size);
    }
  }

  // shape
  &--circle {
    padding-right: core.$space-075-x;
    padding-left: core.$space-075-x;
    border-radius: 999px;
  }

  &--square {
    border-radius: 0px;
  }

  &-wrap {
    display: inline-block;
    width: 100%;

    @at-root #{&}#{&}--auto-width {
      width: fit-content;
      min-width: 60px;
      max-width: 100%;
    }

    @each $status in $statuses {
      &--#{$status} {
        .#{$input-prefix-cls}-tips {
          $theme: theme.get-theme-by-status($status);
          color: map.get(
            input.$input-tokens,
            input-color-text-#{$theme}-default
          );
        }

        .#{$input-prefix-cls} {
          @include input-color($status, false);
        }
      }
    }

    &--disabled {
      .#{$input-prefix-cls}-tips {
        color: core.$color-text-disabled;
      }

      .#{$input-prefix-cls} {
        cursor: not-allowed;
      }

      @each $status in $statuses {
        @at-root &.#{$input-prefix-cls}-wrap--#{$status} {
          .#{$input-prefix-cls}-tips {
            $theme: theme.get-theme-by-status($status);
            color: map.get(
              input.$input-tokens,
              input-color-text-#{$theme}-disabled
            );
          }

          .#{$input-prefix-cls} {
            cursor: not-allowed;
            @include input-color($status, true);
          }
        }
      }

      .#{$input-prefix-cls}-inner {
        &::placeholder {
          color: core.$color-text-disabled;
        }
      }
    }
  }

  &-max-length,
  &-prefix,
  &-suffix,
  &-clear {
    display: inline-flex;
    align-items: center;
    font-size: inherit;

    svg {
      font-size: inherit;
      fill: currentColor;
    }
  }

  &-clear {
    position: relative;
    width: 0;
    height: fit-content;
    padding: 0px;
    font-size: inherit;
    color: core.$color-text-secondary;
    cursor: pointer;
    background-color: transparent;
    border: 0px;
    opacity: 0;
    transition: opacity core.$motion-duration-rapid core.$motion-easing-in-out;

    svg {
      position: relative;
    }

    &::before {
      position: absolute;
      display: block;
      width: 100%;
      height: 100%;
      content: '';
      border-radius: core.$radius-circle;
      transition: background-color core.$motion-duration-rapid
        core.$motion-easing-in-out;
      transform: scale(1.3);
    }

    &:hover {
      &::before {
        background-color: rgba(0, 0, 0, 0.1);
      }
    }
  }

  &:hover:not(&-wrap--disabled &) {
    background-color: core.$color-surface-component-hover;

    .#{$input-prefix-cls}-clear {
      width: fit-content;
      opacity: 1;
    }
  }

  & > *:not(:last-child) {
    margin-right: core.$space-025-x;
  }

  &-inner {
    flex: 1;
    min-width: 0;

    max-width: 100%;
    padding: 0;
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;

    color: core.$color-text-primary;

    cursor: inherit;
    background-color: transparent;

    border: 0;
    outline: 0;

    &::placeholder {
      color: core.$color-text-tertiary;
    }
  }

  &-pre {
    position: absolute;
    white-space: nowrap;
    visibility: hidden;
  }

  &-tips {
    padding-right: core.$space-0125-x;
    padding-left: core.$space-0125-x;
    margin-top: core.$space-0125-x;
    font-size: #{core.$font-size-small};
    color: core.$color-text-tertiary;
  }
}
