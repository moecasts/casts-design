@use 'sass:map';
@use '@casts/theme/styles/scss/vars/core';
@use '@casts/theme/styles/scss/tabs' as base-tabs;
@use '@casts/theme/styles/scss/vars/tabs';

@use '@casts/theme/styles/plugins/helper/button-style';

$tabs-prefix-cls: #{core.$prefix-cls}-tabs;

$sizes: 'small', 'medium', 'large';

.#{$tabs-prefix-cls} {
  &-bar {
    position: relative;
    overflow: hidden;
    touch-action: pan-y;

    &,
    &-container {
      display: flex;
      gap: core.$space-05-x;
      align-items: center;
    }

    &::after {
      position: absolute;
      bottom: calc(0px - core.$border-width-xsmall);
      display: block;
      width: 100%;
      content: '';
      border: core.$border-width-xsmall solid tabs.$tabs-color-border;
    }

    &-container {
      padding: core.$space-025-x;
      white-space: nowrap;

      scrollbar-width: 0;
      -ms-overflow-style: none;

      &::-webkit-scrollbar {
        display: none;
        width: 0;
        height: 0;
      }
    }

    &-item {
      @include button-style.button-style(#{$tabs-prefix-cls}-bar-item);
      @include button-style.button-color(#{$tabs-prefix-cls}-bar-item);
      box-sizing: border-box;
      display: inline-flex;
      align-items: center;
      width: 100%;
      height: 100%;
      color: inherit;
      text-decoration: none;

      @include button-style.button-space();
    }
  }

  &-content {
    padding: core.$space-05-x;
  }

  @each $size in $sizes {
    &--#{$size} {
      .#{$tabs-prefix-cls}-bar {
        height: map.get(tabs.$tabs-tokens, tabs-bar-size-#{$size});

        &-item {
          @include button-style.button-size(
            $element: 'tabs-bar-item',
            $size: $size,
            $tokens: tabs.$tabs-tokens
          );

          &-inner {
            @include button-style.button-space(
              $space-inset: map.get(
                  tabs.$tabs-tokens,
                  tabs-bar-item-space-inset-#{$size}
                )
            );
          }
        }
      }
    }
  }
}
